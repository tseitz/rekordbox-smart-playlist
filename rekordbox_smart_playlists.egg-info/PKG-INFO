Metadata-Version: 2.4
Name: rekordbox-smart-playlists
Version: 1.0.0
Summary: A tool for managing Rekordbox smart playlists from JSON configuration files
Author-email: Your Name <your.email@example.com>
Maintainer-email: Your Name <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/rekordbox-smart-playlists
Project-URL: Bug Reports, https://github.com/yourusername/rekordbox-smart-playlists/issues
Project-URL: Source, https://github.com/yourusername/rekordbox-smart-playlists
Project-URL: Documentation, https://rekordbox-smart-playlists.readthedocs.io/
Keywords: rekordbox,dj,music,playlists,smart-playlists,pioneer
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: Topic :: Multimedia :: Sound/Audio :: Analysis
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pyrekordbox>=0.4.4
Requires-Dist: sqlalchemy>=1.4.0
Requires-Dist: toml>=0.10.2
Requires-Dist: colorama>=0.4.4
Requires-Dist: pathlib2>=2.3.0; python_version < "3.4"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.910; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Requires-Dist: pre-commit>=2.0; extra == "dev"
Requires-Dist: types-toml>=0.10.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=6.0; extra == "test"
Requires-Dist: pytest-cov>=2.0; extra == "test"
Requires-Dist: pytest-mock>=3.0; extra == "test"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0; extra == "docs"
Requires-Dist: myst-parser>=0.15; extra == "docs"

# Rekordbox Smart Playlists

A powerful tool for managing Rekordbox smart playlists from JSON configuration files. This tool provides comprehensive playlist management, backup/restore functionality, and metadata synchronization capabilities.

## ✨ Features

- **Smart Playlist Management**: Create complex smart playlists from JSON configurations
- **Backup & Restore**: Comprehensive database backup with validation and restore capabilities  
- **Metadata Synchronization**: Sync metadata between Rekordbox database and file names
- **Unified CLI**: Single command-line interface for all operations
- **Configuration Management**: Centralized configuration with multiple format support
- **Robust Error Handling**: Comprehensive error handling and logging
- **Dry Run Mode**: Preview changes before applying them

## 🚀 Quick Start

### Installation

1. **Clone the repository:**
   ```bash
   git clone https://github.com/yourusername/rekordbox-smart-playlists.git
   cd rekordbox-smart-playlists
   ```

2. **Install dependencies:**
   ```bash
   # Install sqlcipher3 (required for Rekordbox database access)
   source venv/bin/activate
   git clone https://github.com/coleifer/sqlcipher3
   cd sqlcipher3
   SQLCIPHER_PATH=$(brew info sqlcipher | awk 'NR==4 {print $1; exit}'); C_INCLUDE_PATH="$SQLCIPHER_PATH"/include LIBRARY_PATH="$SQLCIPHER_PATH"/lib python setup.py build
   SQLCIPHER_PATH=$(brew info sqlcipher | awk 'NR==4 {print $1; exit}'); C_INCLUDE_PATH="$SQLCIPHER_PATH"/include LIBRARY_PATH="$SQLCIPHER_PATH"/lib python setup.py install
   cd ..
   
   # Install the package
   pip install -e .
   ```

3. **Create configuration file:**
   ```bash
   # Run migration script to create example config
   python migrate_to_new_structure.py
   
   # Copy and customize configuration
   cp config.example.json config.json
   # Edit config.json with your settings
   ```

### Basic Usage

```bash
# Create all playlists from JSON files
rekordbox-smart-playlists playlist create --all

# Create playlists from specific file
rekordbox-smart-playlists playlist create --file house.json

# Create backup before operations
rekordbox-smart-playlists backup create

# Fix metadata interactively
rekordbox-smart-playlists metadata fix --interactive

# Preview changes without applying them
rekordbox-smart-playlists --dry-run playlist create --all
```

## 📖 Documentation

### Command Line Interface

The tool provides a unified CLI with the following main commands:

#### Playlist Commands
```bash
# Create playlists
rekordbox-smart-playlists playlist create --all              # From all JSON files
rekordbox-smart-playlists playlist create --file house.json  # From specific file

# List existing playlists
rekordbox-smart-playlists playlist list                      # All playlists
rekordbox-smart-playlists playlist list --smart-only         # Smart playlists only
rekordbox-smart-playlists playlist list --filter "house"     # Filter by name

# Validate configurations
rekordbox-smart-playlists playlist validate --all            # Validate all configs
rekordbox-smart-playlists playlist validate --file house.json # Validate specific file
```

#### Backup Commands
```bash
# Create backup
rekordbox-smart-playlists backup create                      # Auto-named backup
rekordbox-smart-playlists backup create --name "my-backup"   # Custom name

# List backups
rekordbox-smart-playlists backup list                        # Simple list
rekordbox-smart-playlists backup list --detailed             # Detailed info

# Restore from backup
rekordbox-smart-playlists backup restore backup_20231201.zip # Restore backup
rekordbox-smart-playlists backup restore --no-safety-backup  # Skip safety backup

# Validate backup
rekordbox-smart-playlists backup validate backup_20231201.zip

# Clean up old backups
rekordbox-smart-playlists backup cleanup --keep 5            # Keep 5 most recent
```

#### Metadata Commands
```bash
# Fix metadata discrepancies
rekordbox-smart-playlists metadata fix --interactive         # Interactive mode
rekordbox-smart-playlists metadata fix --batch-database      # Use database as authority
rekordbox-smart-playlists metadata fix --batch-filename      # Use filename as authority

# Preview metadata changes
rekordbox-smart-playlists metadata preview                   # Preview discrepancies
rekordbox-smart-playlists metadata preview --max-files 50    # Limit preview

# Validate filename formats
rekordbox-smart-playlists metadata validate                  # Check filename formats
```

### Configuration

The tool supports configuration files in JSON or TOML format. Configuration is loaded from:

1. Command-line specified file (`--config config.json`)
2. Default locations:
   - `./config.json` or `./config.toml`
   - `./.rekordbox-config.json` or `./.rekordbox-config.toml`
   - `~/.config/rekordbox-smart-playlists/config.json`

#### Example Configuration (config.json)

```json
{
  "collection_path": "/Users/username/Music/Collection",
  "playlist_data_path": "./playlist-data",
  "backup_base_path": "/Users/username/Dropbox/DJ/Rekordbox DB Backup",
  "pioneer_install_dir": "/Applications/rekordbox 6",
  "default_parent_playlist": "DaneDubz",
  "max_backups": 10,
  "auto_backup": true,
  "backup_before_changes": true,
  "dry_run": false,
  "verbose": false,
  "log_level": "INFO",
  "audio_extensions": [".mp3", ".wav", ".flac", ".aiff", ".m4a"]
}
```

### Playlist Configuration Format

Playlists are defined in JSON files with the following structure:

```json
{
  "data": [
    {
      "parent": "House",
      "mainConditions": ["House"],
      "negativeConditions": ["Archive"],
      "playlists": [
        {
          "name": "Deep House",
          "operator": 1,
          "contains": ["Deep House"]
        },
        {
          "name": "Party Hits",
          "operator": 1,
          "contains": ["Party Hits"],
          "rating": ["4", "5"]
        },
        {
          "name": "Recent Additions",
          "operator": 1,
          "dateCreated": {
            "time_period": 30,
            "time_unit": "day",
            "operator": "IN_LAST"
          }
        }
      ]
    }
  ]
}
```

#### Playlist Configuration Fields

- **parent**: Name of parent folder (created if doesn't exist)
- **mainConditions**: Tags that apply to all playlists in this category
- **negativeConditions**: Tags to exclude from all playlists
- **playlists**: Array of individual playlist configurations
  - **name**: Playlist name
  - **operator**: 1 (ALL) or 2 (ANY) - logical operator for conditions
  - **contains**: Tags that must be present
  - **doesNotContain**: Tags that must not be present
  - **rating**: Rating range [min, max]
  - **dateCreated**: Date-based filtering
    - **time_period**: Number (1, 30, etc.)
    - **time_unit**: "day", "week", "month", "year"
    - **operator**: "IN_LAST"

## 🔧 Global Options

All commands support these global options:

- `--config/-c`: Specify configuration file
- `--verbose/-v`: Enable verbose logging
- `--quiet/-q`: Quiet mode (warnings and errors only)
- `--dry-run`: Preview changes without applying them
- `--log-file`: Log to file in addition to console
- `--help/-h`: Show help information

## 🔄 Migration from Old Structure

If you're upgrading from the old structure, run the migration script:

```bash
python migrate_to_new_structure.py
```

This will:
- Show you the new command equivalents
- Create an example configuration file
- Create backward compatibility shims for old scripts

### Migration Guide

| Old Command | New Command |
|-------------|-------------|
| `python smart_playlists.py` | `rekordbox-smart-playlists playlist create --all` |
| `python create_recent_playlists.py` | `rekordbox-smart-playlists playlist create --file recent-additions.json` |
| `python fix_rekordbox_metadata.py` | `rekordbox-smart-playlists metadata fix --interactive` |
| `from rekordbox_backup import backup_rekordbox_db` | `rekordbox-smart-playlists backup create` |

## 🛡️ Safety Features

- **Automatic Backups**: Creates backups before making changes (configurable)
- **Dry Run Mode**: Preview all changes before applying
- **Backup Validation**: Validates backup integrity after creation
- **Safety Backups**: Creates additional backup before restore operations
- **Transaction Support**: Database operations are wrapped in transactions
- **Comprehensive Logging**: Detailed logging for troubleshooting

## 📁 Project Structure

```
rekordbox-smart-playlists/
├── rekordbox_smart_playlists/          # Main package
│   ├── __init__.py
│   ├── core/                           # Core functionality
│   │   ├── __init__.py
│   │   ├── config.py                   # Configuration management
│   │   ├── database.py                 # Database operations
│   │   ├── playlist_manager.py         # Playlist creation/management
│   │   ├── backup_manager.py           # Backup/restore operations
│   │   └── metadata_fixer.py           # Metadata synchronization
│   ├── utils/                          # Utility modules
│   │   ├── __init__.py
│   │   ├── logging.py                  # Logging utilities
│   │   ├── file_utils.py               # File operations
│   │   └── validation.py               # Validation functions
│   └── cli/                            # Command-line interface
│       ├── __init__.py
│       ├── main.py                     # CLI entry point
│       └── commands.py                 # Command implementations
├── playlist-data/                      # JSON configuration files
├── examples/                           # Example files
├── pyproject.toml                      # Project configuration
├── README.md                           # This file
└── migrate_to_new_structure.py         # Migration script
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## 📝 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🙏 Acknowledgments

- [pyrekordbox](https://github.com/dylanljones/pyrekordbox) for Rekordbox database access
- Pioneer DJ for creating Rekordbox
- The DJ community for inspiration and feedback

## 🐛 Troubleshooting

### Common Issues

1. **Database Connection Errors**
   - Ensure Rekordbox is closed before running the tool
   - Check that sqlcipher3 is properly installed
   - Verify Pioneer directories exist in configuration

2. **Permission Errors**
   - Ensure write permissions to backup directory
   - Check collection path permissions

3. **Tag Not Found Errors**
   - Verify tag names match exactly (case-sensitive)
   - Check that tags exist in your Rekordbox database

### Getting Help

- Check the `--help` option for any command
- Enable verbose logging with `--verbose`
- Use `--dry-run` to preview changes
- Check log files for detailed error information

For more help, please open an issue on GitHub.
